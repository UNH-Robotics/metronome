/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Broker_H
#define Broker_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "visualizer_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class BrokerIf {
 public:
  virtual ~BrokerIf() {}
  virtual void initialize(const Init& initData) = 0;
  virtual void publishIteration(const Iteration& itData) = 0;
  virtual void getInitData(Init& _return) = 0;
  virtual void getIterations(IterationBundle& _return) = 0;
};

class BrokerIfFactory {
 public:
  typedef BrokerIf Handler;

  virtual ~BrokerIfFactory() {}

  virtual BrokerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(BrokerIf* /* handler */) = 0;
};

class BrokerIfSingletonFactory : virtual public BrokerIfFactory {
 public:
  BrokerIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<BrokerIf>& iface) : iface_(iface) {}
  virtual ~BrokerIfSingletonFactory() {}

  virtual BrokerIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(BrokerIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<BrokerIf> iface_;
};

class BrokerNull : virtual public BrokerIf {
 public:
  virtual ~BrokerNull() {}
  void initialize(const Init& /* initData */) {
    return;
  }
  void publishIteration(const Iteration& /* itData */) {
    return;
  }
  void getInitData(Init& /* _return */) {
    return;
  }
  void getIterations(IterationBundle& /* _return */) {
    return;
  }
};


class Broker_initialize_args {
 public:

  Broker_initialize_args(const Broker_initialize_args&);
  Broker_initialize_args& operator=(const Broker_initialize_args&);
  Broker_initialize_args() {
  }

  virtual ~Broker_initialize_args() throw();
  Init initData;

  void __set_initData(const Init& val);

  bool operator == (const Broker_initialize_args & rhs) const
  {
    if (!(initData == rhs.initData))
      return false;
    return true;
  }
  bool operator != (const Broker_initialize_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Broker_initialize_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Broker_initialize_pargs {
 public:


  virtual ~Broker_initialize_pargs() throw();
  const Init* initData;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Broker_publishIteration_args {
 public:

  Broker_publishIteration_args(const Broker_publishIteration_args&);
  Broker_publishIteration_args& operator=(const Broker_publishIteration_args&);
  Broker_publishIteration_args() {
  }

  virtual ~Broker_publishIteration_args() throw();
  Iteration itData;

  void __set_itData(const Iteration& val);

  bool operator == (const Broker_publishIteration_args & rhs) const
  {
    if (!(itData == rhs.itData))
      return false;
    return true;
  }
  bool operator != (const Broker_publishIteration_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Broker_publishIteration_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Broker_publishIteration_pargs {
 public:


  virtual ~Broker_publishIteration_pargs() throw();
  const Iteration* itData;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Broker_getInitData_args {
 public:

  Broker_getInitData_args(const Broker_getInitData_args&);
  Broker_getInitData_args& operator=(const Broker_getInitData_args&);
  Broker_getInitData_args() {
  }

  virtual ~Broker_getInitData_args() throw();

  bool operator == (const Broker_getInitData_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Broker_getInitData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Broker_getInitData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Broker_getInitData_pargs {
 public:


  virtual ~Broker_getInitData_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Broker_getInitData_result__isset {
  _Broker_getInitData_result__isset() : success(false), noData(false) {}
  bool success :1;
  bool noData :1;
} _Broker_getInitData_result__isset;

class Broker_getInitData_result {
 public:

  Broker_getInitData_result(const Broker_getInitData_result&);
  Broker_getInitData_result& operator=(const Broker_getInitData_result&);
  Broker_getInitData_result() {
  }

  virtual ~Broker_getInitData_result() throw();
  Init success;
  NoDataException noData;

  _Broker_getInitData_result__isset __isset;

  void __set_success(const Init& val);

  void __set_noData(const NoDataException& val);

  bool operator == (const Broker_getInitData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(noData == rhs.noData))
      return false;
    return true;
  }
  bool operator != (const Broker_getInitData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Broker_getInitData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Broker_getInitData_presult__isset {
  _Broker_getInitData_presult__isset() : success(false), noData(false) {}
  bool success :1;
  bool noData :1;
} _Broker_getInitData_presult__isset;

class Broker_getInitData_presult {
 public:


  virtual ~Broker_getInitData_presult() throw();
  Init* success;
  NoDataException noData;

  _Broker_getInitData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Broker_getIterations_args {
 public:

  Broker_getIterations_args(const Broker_getIterations_args&);
  Broker_getIterations_args& operator=(const Broker_getIterations_args&);
  Broker_getIterations_args() {
  }

  virtual ~Broker_getIterations_args() throw();

  bool operator == (const Broker_getIterations_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Broker_getIterations_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Broker_getIterations_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Broker_getIterations_pargs {
 public:


  virtual ~Broker_getIterations_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Broker_getIterations_result__isset {
  _Broker_getIterations_result__isset() : success(false), noData(false) {}
  bool success :1;
  bool noData :1;
} _Broker_getIterations_result__isset;

class Broker_getIterations_result {
 public:

  Broker_getIterations_result(const Broker_getIterations_result&);
  Broker_getIterations_result& operator=(const Broker_getIterations_result&);
  Broker_getIterations_result() {
  }

  virtual ~Broker_getIterations_result() throw();
  IterationBundle success;
  NoDataException noData;

  _Broker_getIterations_result__isset __isset;

  void __set_success(const IterationBundle& val);

  void __set_noData(const NoDataException& val);

  bool operator == (const Broker_getIterations_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(noData == rhs.noData))
      return false;
    return true;
  }
  bool operator != (const Broker_getIterations_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Broker_getIterations_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Broker_getIterations_presult__isset {
  _Broker_getIterations_presult__isset() : success(false), noData(false) {}
  bool success :1;
  bool noData :1;
} _Broker_getIterations_presult__isset;

class Broker_getIterations_presult {
 public:


  virtual ~Broker_getIterations_presult() throw();
  IterationBundle* success;
  NoDataException noData;

  _Broker_getIterations_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class BrokerClient : virtual public BrokerIf {
 public:
  BrokerClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  BrokerClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void initialize(const Init& initData);
  void send_initialize(const Init& initData);
  void publishIteration(const Iteration& itData);
  void send_publishIteration(const Iteration& itData);
  void getInitData(Init& _return);
  void send_getInitData();
  void recv_getInitData(Init& _return);
  void getIterations(IterationBundle& _return);
  void send_getIterations();
  void recv_getIterations(IterationBundle& _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class BrokerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<BrokerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (BrokerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_initialize(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_publishIteration(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getInitData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getIterations(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  BrokerProcessor(::apache::thrift::stdcxx::shared_ptr<BrokerIf> iface) :
    iface_(iface) {
    processMap_["initialize"] = &BrokerProcessor::process_initialize;
    processMap_["publishIteration"] = &BrokerProcessor::process_publishIteration;
    processMap_["getInitData"] = &BrokerProcessor::process_getInitData;
    processMap_["getIterations"] = &BrokerProcessor::process_getIterations;
  }

  virtual ~BrokerProcessor() {}
};

class BrokerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  BrokerProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< BrokerIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< BrokerIfFactory > handlerFactory_;
};

class BrokerMultiface : virtual public BrokerIf {
 public:
  BrokerMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<BrokerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~BrokerMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<BrokerIf> > ifaces_;
  BrokerMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<BrokerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void initialize(const Init& initData) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->initialize(initData);
    }
    ifaces_[i]->initialize(initData);
  }

  void publishIteration(const Iteration& itData) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->publishIteration(itData);
    }
    ifaces_[i]->publishIteration(itData);
  }

  void getInitData(Init& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getInitData(_return);
    }
    ifaces_[i]->getInitData(_return);
    return;
  }

  void getIterations(IterationBundle& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getIterations(_return);
    }
    ifaces_[i]->getIterations(_return);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class BrokerConcurrentClient : virtual public BrokerIf {
 public:
  BrokerConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  BrokerConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void initialize(const Init& initData);
  void send_initialize(const Init& initData);
  void publishIteration(const Iteration& itData);
  void send_publishIteration(const Iteration& itData);
  void getInitData(Init& _return);
  int32_t send_getInitData();
  void recv_getInitData(Init& _return, const int32_t seqid);
  void getIterations(IterationBundle& _return);
  int32_t send_getIterations();
  void recv_getIterations(IterationBundle& _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
